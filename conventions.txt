Для веб-разработчиков взять за основу style guide компании 
Airbnb (https://airbnb.io/javascript/), 
и точечно изменять решения, которые казались неподходящими 
на вкус команды.
Для code style в линтере ESLint есть набор правил (preset), 
который позволяет контролировать соблюдение этих правил 
(https://www.npmjs.com/package/eslint-config-airbnb).

Наиболее мейнстримным подходом к комментариям в коде является писать 
их от балды, как хочется. TODO и FIXME являются общепринятым 
стандартом. Чтобы сделать картину стройной — можно взять JSDoc (https://jsdoc.app/).

Разработческую документацию писать в git-репозитории в формате Markdown (.md). 
Организовать некоторое подобие книги — на главной разделы (главы), внутри каждого статьи (параграфы).

Описать как мы общаемся с бэкендом.

### Особенные заголовки запроса

### Типичные HTTP-коды ответа
* 200 (сервис ответил)
* 401 (истекла сессия, например)
* 404 (вероятно, ошиблись URL-ом)
* 500 (сервис спит)



Итак, тебя попросили поревьюить код. Это прекрасно!
Полагается, что merge request и pull request - это синонимы.
На проекте используется Gitverse и BitBucket, что объясняет использование его терминов.

## Кто ищет, тот всегда найдёт, или что делать, если к тебе попал pull request

### 1. Перейти в ветку
Возможно, у тебя она не запустится, если затронут `package.json`. Без паники! Если есть новые зависимости, надо выполнить 
`npm install`, после чего попробовать запустить проект снова.

### 2. Запустить проект
npm run serve or npm run backend

### 3. Потыкаться как пользователь
Во-первых, надо понять, в чём суть доработки (или багофикса, it depends). 
Неплохо, если раньше ты что-то слышал о задаче или читал аналитику. Здорово, если автор pull request-а поделится с тобой своими 
знаниями.

### 4. Прочесть код в первый раз
При первом прогоне в виде диффов можно увидеть явные косяки - забытые `console.log()`, дебаггеры, танцы с бубном вместо готовых решений, нарушения договорённостей и так далее..

Отмечу, что целиком новые модули _гораздо_ удобнее читать в родной IDE с подсветкой синтаксиса, чем в Bitbucket или Gitverse.

### 5. Прочесть код во второй раз
Со второго раза код нужно осмыслить.

### 6. Проверить стыковку с API

## Чего искать будем?
12. Избыточное приведение к булевскому типу в условии if-а или тернара (например, `if (!!(a || b))`).

## "Я что-то нашёл..."
Как писать комментарии к pull request-у:
1. Первое, и самое важное, - проявляй уважение к автору pull request-а.
2. Если видишь другое, более оптимальное решение - предложи его.
3. Если допущена опечатка или ошибка, следует указать правильное значение

## Доверяй, но перепроверяй
Что делать после того, как автор обработал замечания? 
Перепроверить.

Зачем перепроверять то, что сделано?
1. Тебя могли неправильно понять
2. Комментарий был просто не замечен или проигнорирован

## Вопросы и ответы
> Можно ли «включать заднюю», если автор возражает?
Конечно, аргументированный спор - это здорово. 
Не надо бояться уступить, если только ты не отстаиваешь общие правила и договорённости. 

## Работа с кодом

В качестве контроля версий - git. Вливание кода происходит по стандартному git flow сценарию.

Название веток

Если фича - feature/ERA-{jira task name}

Например: если вы делали фичу с таском “643” то называете ее

feature/ERA-643

Если багфикс - bugfix/ERA-{jira bug number}

Если хотфикс - hotfix/ERA-{jira bug number}

Для коммитов: id task: message [ref: http://url-to-task-in-jira]

Пример:

643: add smartans feature [ref: http://url-to-task-in-jira ]

После реализации фичи\багфикса вы делаете Merge Request. В гитверсе есть группа ревьюверов. Вешаете на человека к которому код наиболее релевантный.



